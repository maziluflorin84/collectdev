String uri = "/collectdev/esppost.php";

const byte rxPin = 6;
const byte txPin = 7;

//String server = "students.info.uaic.ro";
//String uri = "/~florin.mazilu/collectdev/esppost.php";

SoftwareSerial WiFiModule(rxPin, txPin);

unsigned long lastTimeMillis = 0; // last time update
const unsigned long interval = 10000L; // interval at which to do something (milliseconds)

boolean start = true;
String response = "";
boolean jsonFlag = false;
boolean processJsonFlag = false;
long data = 0;
char* actionValue;
String sensorValue = "";

void checkWifiModule() {
    WiFiModule.println("AT");
    delay(1000);
    if(WiFiModule.find((char*)"OK")) {
        Serial.println("Module works propperly!");
    } else {
        Serial.println("There is an issue with the Wifi module!!!");
        start = false;
    }
}

void disconnectWifi() {
    WiFiModule.println("AT+CWQAP");
    delay(1000);
    if(WiFiModule.find((char*)"OK"))
        Serial.println("Disconnected from previous network!");
}

void setWifiMode() {
    WiFiModule.println("AT+CWMODE=1");
    delay(1000);
    if(WiFiModule.find((char*)"OK"))
        Serial.println("Wifi mode set to Client!");
}

void connectWifi() {
    WiFiModule.println("AT+CWJAP=\"" + ssid + "\",\"" + pass + "\"");
    delay(1000);
    lastTimeMillis = millis();
    while (!WiFiModule.find((char*)"OK")) {
        if (millis() - lastTimeMillis > 30000) {
            Serial.println("Could not connect to wifi network!!!");
            Serial.println("Maybe ssid or password is wrong");
            start = false;
            break;
        }
    }
    if (start) {
        Serial.println("Connected to \"" + ssid + "\" network!!!");
        lastTimeMillis = 0;
    }
}

boolean parseResponse(char c) {
    boolean startAction = false;
    if (c == '{') {
        jsonFlag = true;
        response = c;
    } else if (c == '}') {
        jsonFlag = false;
        response += c;
        int responseLength = response.length() + 1;
        char jsonResponse[responseLength];
        StaticJsonDocument<200> jsonDoc;
        response.toCharArray(jsonResponse, responseLength);
        DeserializationError error = deserializeJson(jsonDoc, jsonResponse);
        if (error) {
            Serial.print("deserializeJson() failed: ");
            Serial.println(error.c_str());
        }
        actionValue = jsonDoc["actuatorValue"];
        Serial.println("actuatorValue = " + String(actionValue));
        startAction = true;
    } else if (jsonFlag) {
        response += c;
    }
    return startAction;
}